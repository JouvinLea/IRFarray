#! /usr/bin/env python
import numpy as np
from astropy.io import fits
from astropy.table import Table
from astropy.coordinates import Angle
from scipy import interpolate
import math
from astropy.io.fits import Column
import sys
import os
from glob import glob
from pathlib import Path
import os
import argparse
import pylab as pt
pt.ion()

"""
Commande a lancer pour pouvoir donner des arguments au scripts
"""


# ./plot_psftable.py 'Crab_All.list' 'ash_stereo' "Prod15_4_stereo"

class Observation:
    """Helper functions to compute file and folder names.
    """

    # filetypes = ['events', 'aeff', 'edisp', 'psf_3gauss']
    filetypes = ['events']

    def __init__(self, obs_id, hap_config=None, telpattern=None):
        self.obs_id = obs_id
        self.hap_config = hap_config
        self.telpattern = telpattern

    @property
    def obs_group(self):
        obs_id_min = self.obs_id - (self.obs_id % 200)
        obs_id_max = obs_id_min + 199
        return obs_id_min, obs_id_max

    @property
    def _obs_group_folder(self):
        return Path('run{:06d}-{:06d}'.format(self.obs_group[0], self.obs_group[1]))

    @property
    def _obs_folder(self):
        return Path('run{:06d}'.format(self.obs_id))

    def folder(self, step=None):
        """Create folder for a given step.
        """
        if step is None:
            return self._obs_group_folder / self._obs_folder
        else:
            return Path(step) / self._obs_group_folder / self._obs_folder

    def hap_filename(self, filetype):
        """Name of FITS file generated by HAP"""
        if filetype == 'events':
            return self.folder('events') / 'run_{:07d}_{}_eventlist.fits'.format(self.obs_id, self.hap_config)
            # return self.folder('events') / 'events_{:06d}.fits.gz'.format(self.obs_id)
        elif filetype == 'aeff':
            return self.folder('irfs') / 'aeff_{:06d}.fits.gz'.format(self.obs_id)
        elif filetype == 'edisp':
            return self.folder('irfs') / 'edisp_{:06d}.fits.gz'.format(self.obs_id)
        elif filetype == 'psf_3gauss':
            return self.folder('irfs') / 'psf_3gauss_{:06d}.fits.gz'.format(self.obs_id)
        else:
            raise ValueError('Invalid {} {}'.format(filetype))

    def out_filename(self, filetype, dir, format='old'):
        """Name of FITS file in out folder"""
        filename = self.filename(filetype=filetype, format=format)
        return Path(dir) / filename

    def filename(self, filetype, format='old'):
        if format == 'old':
            TAGS = dict(
                events='events',
                aeff='aeff_2d',
                edisp='edisp_2d',
                psf_3gauss='psf_3gauss',
                psf_king='psf_king',
                psf_table='psf_table',
                background='bkg_offruns',
            )
        elif format == 'new':
            TAGS = dict(
                events='events',
                aeff='aeff',
                edisp='edisp',
                psf_3gauss='psf_3gauss',
                psf_king='psf_king',
                psf_table='psf_table',
                background='background',
            )

        tag = TAGS[filetype]
        filename = '{}_{:06d}.fits.gz'.format(tag, self.obs_id)
        return self.folder() / filename

    def mkdir(self, step):
        """Make directory (parts=True, exists_ok=True)"""
        path = self.folder(step)
        if not path.exists():
            path.mkdir(parents=True)

        return path

    def check_out_files_exist(self):
        """Check if all out files exist"""
        for filetype in self.filetypes:
            filename = self.out_filename(filetype)
            if not filename.is_file():
                log.error('MISSING: {}'.format(filename))
                return False

        return True


def triplegauss(theta2,s1,s2,s3,A2,A3):

    s12 = s1*s1
    s22 = s2*s2
    s32 = s3*s3

    gaus1 = np.exp(-theta2/(2*s12))
    gaus2 = np.exp(-theta2/(2*s22))
    gaus3 = np.exp(-theta2/(2*s32))

    y = (gaus1 + A2*gaus2 + A3*gaus3) 
    norm =  2*math.pi*(s12+ np.abs(A2) * s22 + np.abs(A3) * s32)
    return y/norm

def Integral_triplegauss(theta2min,theta2max,s1,s2,s3,A2,A3):
    s12 = s1*s1
    s22 = s2*s2
    s32 = s3*s3

    gaus1 = np.exp(-theta2min/(2*s12))-np.exp(-theta2max/(2*s12))
    gaus2 = np.exp(-theta2min/(2*s22))-np.exp(-theta2max/(2*s22))
    gaus3 = np.exp(-theta2min/(2*s32))-np.exp(-theta2max/(2*s32))

    y = 2*math.pi*(s12*gaus1 + A2*s22*gaus2 + A3*s32*gaus3) 
    norm =  2*math.pi*(s12+ np.abs(A2) * s22 + np.abs(A3) * s32)
    return y/norm

  

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Make the index and obs table')
    parser.add_argument('runlist', action="store",
                        help='List of run for which we want to interpolate the IRFs')
    parser.add_argument('config', action="store", help='Prod Configuration, cut we apply')
    parser.add_argument('prod', action="store", help='Prod')
    arg = parser.parse_args()
    runlist = arg.runlist
    coupure = arg.config
    prod = arg.prod
    directory = os.path.expandvars('$CALDB')
    PathListRun = directory + "/" + prod + "/" + coupure

    # Sur Lyon
    # PathListRun = directory+"/data/hess/hap-16-03_fits/"+prod+"/"+config

    RunNumber = np.loadtxt(runlist, ndmin=2)
    # Load les info sur les MCs depuis la table d'IRF ou est stocke pour toutes les nergies, zenith,offset et efficacite des MCs la valeur des la surface efficiace, du biais et sigma pour la resolution et du s1, s2, s3, A2, A3 de la tripplegauss utilisee pour fitter la psf
    PathTableIRF = os.path.expandvars('$HESSCONFIG')
    PathTablePSF = os.path.expandvars('$HESSCONFIG')

    for nrun in RunNumber[:, 0]:
        obs = Observation(int(nrun))
        informat = "old"
        namerun = str(Path(PathListRun) / obs.filename('events', format=informat))
        try:
            table = Table.read(namerun, hdu='EVENTS')
        except Exception:
            print "fits corrupted for file " + namerun
            continue
        hdurun = fits.open(namerun)
        az=hdurun[1].data["AZ"]
        az[np.where(az>180)]=az[np.where(az>180)]-360
        AZRun=az.mean()
        AltRun = hdurun[1].data["ALT"].mean()
        if ((AZRun > 90) & (AZRun < 270)):
            mode = "south"
        else:
            mode = "north"
        ZenRun = 90 - AltRun
        EffRun = hdurun[1].header["MUONEFF"] * 100
        #name_config = coupure[0:3] + "_" + mode + "_" + coupure[10:]
        name_config="ash_north_stereo"
        print(nrun)
        print(PathTableIRF + "/" + name_config + "/IRF_" + name_config + ".npz")
        IRF = np.load(PathTableIRF + "/" + name_config + "/IRF_" + name_config + ".npz")
        IRFArea = IRF["TableArea"]
        IRFSigma = IRF["TableSigma"]
        IRFBiais = IRF["TableBiais"]
        enMC = IRF["enMC"]
        lnenMC = IRF["lnenMC"]
        zenMC = IRF["zenMC"]
        effMC = IRF["effMC"]
        offMC = IRF["offMC"]

        PSF = np.load(PathTablePSF + "/" + name_config + "/PSF_triplegauss_" + name_config + ".npz")
        PSFs1 = PSF["TableSigma1"]
        PSFs2 = PSF["TableSigma2"]
        PSFs3 = PSF["TableSigma3"]
        PSFA2 = PSF["TableA2"]
        PSFA3 = PSF["TableA3"]

        binoffMC = len(offMC)
        binEMC = len(enMC)
        binzenMC = len(zenMC)
        bineffMC = len(effMC)
        
        # reverifier qu ils ont bien ca dans leur bin PA en low edge et upper edge
        off_low = offMC
        off_hi = offMC

        # pour les extremites prendre le milieu des bin en log
        binlnEMC = lnenMC[1:] - lnenMC[:-1]
        # Pour le premier bin en energie pour defenr le edge low du bin on prend la demilargeur du premier bin
        binlnEMClow = np.insert(binlnEMC, 0, binlnEMC[0])
        # Pour le dernier bin en energie pour defenr le edge up du bin on prend la demilargeur du dernier bin
        binlnEMCup = np.insert(binlnEMC, -1, binlnEMC[-1])
        # Retrouver
        lnEMClow = lnenMC - binlnEMClow / 2
        lnEMCup = lnenMC + binlnEMCup / 2
        E_true_low = pow(10, lnEMClow)
        E_true_up = pow(10, lnEMCup)

        rad = Angle(np.arange(0, 1.5, 0.005), 'deg')
        rad_low=rad[0:-1]
        rad_high=rad[1:]
        rad_mean=(rad_low+rad_high)/2.
        bin_rad=len(rad_mean)
        len_psf_table = bin_rad*binoffMC*binEMC
        
        PSFS1Run = np.zeros((binoffMC, binEMC))
        PSFS2Run = np.zeros((binoffMC, binEMC))
        PSFS3Run = np.zeros((binoffMC, binEMC))
        PSFA2Run = np.zeros((binoffMC, binEMC))
        PSFA3Run = np.zeros((binoffMC, binEMC))
        hist_value=np.zeros(PSFA3.shape)
        hist_value2=np.zeros((bin_rad,binEMC,binoffMC,binzenMC,bineffMC))
        PSF_table=np.zeros((binoffMC, binEMC,bin_rad))
        PSF_table2=np.zeros((binoffMC, binEMC,bin_rad))
        iEMC=10
        ioff=1
        s1_mesh=np.tile(PSFs1, (len(rad_mean.value),1,1,1,1))
        s2_mesh=np.tile(PSFs2, (len(rad_mean.value),1,1,1,1))
        s3_mesh=np.tile(PSFs3, (len(rad_mean.value),1,1,1,1))
        A2_mesh=np.tile(PSFA2, (len(rad_mean.value),1,1,1,1))
        A3_mesh=np.tile(PSFA3, (len(rad_mean.value),1,1,1,1))
        rad_mesh=rad_mean.value.reshape(len(rad_mean.value),1,1,1,1) * np.ones_like(PSFs1)
        hist_value2=triplegauss(rad_mesh**2,s1_mesh,s2_mesh,s3_mesh,A2_mesh,A3_mesh)
        for (irad,rad) in enumerate(rad_mean):
            ind_zen, ind_eff = np.where(PSFs1[iEMC, ioff, :, :] != -1)
                # If there is at least one simu for this offset and this energy for wich the fit works
            if (len(ind_zen) != 0):
                zensame = np.where(ind_zen != ind_zen[0])
                effsame = np.where(ind_eff != ind_eff[0])
                # Il doit y avoir au moins 2 valeurs differentes en efficacite et en zenith pour que l interpolateur marche
                if ((len(zensame[0]) != 0) & (len(effsame[0]) != 0)):
                    coord_eff = effMC[ind_eff]
                    coord_zen = zenMC[ind_zen]
                    points = (coord_eff, np.cos(coord_zen * math.pi / 180))
                    #points = (np.cos(coord_zen * math.pi / 180),coord_eff)
                    #hist_value[iEMC, ioff, ind_zen, ind_eff]=triplegauss((rad_mean[irad]**2).value, PSFs1[iEMC, ioff, ind_zen, ind_eff] , PSFs2[iEMC, ioff, ind_zen, ind_eff], PSFs3[iEMC, ioff, ind_zen, ind_eff] , PSFA2[iEMC, ioff, ind_zen, ind_eff] ,PSFA3[iEMC, ioff, ind_zen, ind_eff])
                    #PSF_table[ioff, iEMC, irad]=interpolate.griddata(points, hist_value[iEMC, ioff, ind_zen, ind_eff],
                    #                                           (EffRun, np.cos(ZenRun * math.pi / 180)),
                    #                                            method='linear')
                    PSF_table2[ioff, iEMC, irad]=interpolate.griddata(points, hist_value2[irad,iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')
                    #PSF_table[ioff, iEMC, irad]=interpolate.griddata(points, hist_value[iEMC, ioff, ind_zen, ind_eff],
                    #                                            (87, np.cos( 59.2* math.pi / 180)),
                    #                                            method='linear')

                    
                    #PSF_table[ioff, iEMC, irad]=interpolate.griddata(points, hist_value[iEMC, ioff, ind_zen, ind_eff],
                    #                                            (np.cos(ZenRun * math.pi / 180),EffRun),
                    #                                            method='linear')
        s1=interpolate.griddata(points, PSFs1[iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')
        s2=interpolate.griddata(points, PSFs2[iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')
        s3=interpolate.griddata(points, PSFs3[iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')
        A2=interpolate.griddata(points, PSFA2[iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')
        A3=interpolate.griddata(points, PSFA3[iEMC, ioff, ind_zen, ind_eff],
                                                                (EffRun, np.cos(ZenRun * math.pi / 180)),
                                                                method='linear')

        Int_fitgauss = lambda x1,x2 : Integral_triplegauss(x1,x2,s1,s2,s3,A2,A3)
        #izen=[9,10]
        iminzen=np.where(ZenRun>zenMC)[0][-1]
        imaxzen=np.where(ZenRun<zenMC)[0][0]
        imineff=np.where(EffRun>effMC)[0][-1]
        imaxeff=np.where(EffRun<effMC)[0][0]
        izen=[iminzen,imaxzen]
        ieff=[imineff,imaxeff]
        for iz in izen:
            for ie in ieff:
                f=triplegauss((rad_mean**2).value, PSFs1[iEMC, ioff, iz, ie] , PSFs2[iEMC, ioff, iz, ie], PSFs3[iEMC, ioff, iz, ie] , PSFA2[iEMC, ioff, iz, ie] ,PSFA3[iEMC, ioff, iz, ie])
                int_f=Integral_triplegauss(rad_low.value,rad_high.value, PSFs1[iEMC, ioff, iz, ie] , PSFs2[iEMC, ioff, iz, ie], PSFs3[iEMC, ioff, iz, ie] , PSFA2[iEMC, ioff, iz, ie] ,PSFA3[iEMC, ioff, iz, ie])
                pt.figure(1)
                pt.semilogx(rad_mean.value,f, label="zen: "+str(zenMC[iz])+"eff: "+str(effMC[ie]))
                pt.figure(2)
                pt.loglog(rad_mean.value,int_f, label="zen: "+str(zenMC[iz])+"eff: "+str(effMC[ie]))

        pt.figure(1)
        #pt.semilogx(rad_mean.value,PSF_table[ioff, iEMC, :],label="ZenRun: "+str("%.2f"%ZenRun)+"EffRun: "+str("%.2f"%EffRun))
        pt.semilogx(rad_mean.value,PSF_table2[ioff, iEMC, :],label="2 ZenRun: "+str("%.2f"%ZenRun)+"EffRun: "+str("%.2f"%EffRun))
        f=triplegauss((rad_mean**2).value, s1,s2,s3,A2,A3)
        int_f=Integral_triplegauss(rad_low.value,rad_high.value, s1,s2,s3,A2,A3)
        pt.figure(1)
        pt.semilogx(rad_mean.value,f, label="param interp")        
        pt.legend()
        pt.figure(2)
        pt.loglog(rad_mean.value,int_f, label="param interp")        
        pt.legend()
        
        import IPython; IPython.embed()


